#!/bin/bash
#
# This script creates a sample resource group and deploys all resources into it from the ARM
# templates.  Most of it can be controlled from the outside by setting env vars.
########################################################################################

if [ -z "${CORE_NODES}" ]; then
    CORE_NODES=3
fi

if [ -z "${READ_REPLICAS}" ]; then
    READ_REPLICAS=2
fi

if [ -z "${NEO4J_PASSWORD}" ]; then
    read -p "Neo4j Password: " -s NEO4J_PASSWORD
    echo
fi

if [ -z "${PUBKEY}" ]; then
    PUBKEY=$(cat ~/.ssh/id_rsa.pub)
fi

if [ -z "${USERNAME}" ]; then
    USERNAME=$(whoami)
fi

SEED=$(head -c 3 /dev/urandom | base64 | sed 's/[^a-zA-Z0-9]/X/g')

if [ -z "${RESOURCE_GROUP}" ] ; then
   export RESOURCE_GROUP="RG-${SEED}"
fi

if [ -z "${CLUSTERNAME}" ]; then
    # Must always be < 11 chars.
    CLUSTERNAME="neo4j-${SEED}"
fi

if [ -z "${DEPLOYMENT}" ]; then
    # DEPLOYMENT="neo4j-$(TZ=0 date +'Neo4j-HA-%Y%m%dT%H%M%SZ')"
    DEPLOYMENT=neo4j-testdeploy
fi

if [ -z "${LOCATION}" ]; then
    LOCATION="East US"
fi

echo $(cat <<JSON
{
    "ClusterName": {
        "value": "${CLUSTERNAME}"
    },
    "CoreNodes": {
        "value": ${CORE_NODES}
    },
    "ReadReplicas": {
        "value": ${READ_REPLICAS}
    },
    "VmSize": {
        "value": "Standard_A1"
    },
    "DataDiskSizeGB": {
        "value": 512
    },
    "AdminUserName": {
        "value": "${USERNAME}"
    },
    "AdminCredential": {
        "value": "${PUBKEY}"
    },
    "VNetResourceGroupName": {
        "value": "${RESOURCE_GROUP}"
    },
    "VNetName": {
        "value": "neoVnet"
    },
    "VNetAddressPrefix": {
        "value": "10.0.0.0/16"
    },
    "SubnetName": {
        "value": "NeoVnetSubnet1"
    },
    "SubnetAddressPrefix": {
        "value": "10.0.1.0/24"
    },
    "PublicIPAllocationMethod": {
        "value": "Static"
    },
    "Neo4jPassword": {
        "value": "${NEO4J_PASSWORD}"
    },
    "ArtifactsBase": {
        "value": "https://s3.amazonaws.com/neo4j-arm/test"
    }
}
JSON
) > .parameters.json

echo "Parameters have been prepared."

echo "Jinja Expansion"
# Expand all jinja templates into regular JSON
for file in arm/*.json.jinja ; do
    # Bash magic that removes jinja extension.  foo.json.jinja -> foo.json
    jsonFile=${file%.jinja}
    echo $jsonFile
    pipenv run python3 generate.py --template "$file" > "$jsonFile" ; 
    if [ $? -ne 0 ] ; then
        echo "Template generation of $file failed; aborting"
        echo "Check your template syntax and try again"
        echo "Local file 'generated.json' contains last output; check this to correlate"
        echo "syntax errors with line numbers from previous exception"
        exit 1
    fi
done

# Resource groups should be created for all things which share
# a lifecycle.  Deployments also can't delete all of their underlying
# resources, so we will destroy all deployment resources by actually
# deleting the entire group.
echo "Checking $RESOURCE_GROUP"
if ! az group show --name "${RESOURCE_GROUP}" &> /dev/null; then
    if ! az group create --name "${RESOURCE_GROUP}" --location "${LOCATION}"; then
        echo "Failed to create necessary resource group ${RESOURCE_GROUP}"
        exit $?
    fi
fi

echo "Validating entire setup"    
if ! az group deployment validate \
     --template-file arm/mainTemplate.json \
     --parameters @.parameters.json \
     --resource-group "${RESOURCE_GROUP}" >/dev/null ; then
    echo "Failed validation of templates, cannot continue"
    exit 1
fi

echo "Deploying templates to S3..."

# Results in HTTP location:
# https://s3.amazonaws.com/neo4j-arm/test/
# Only put the JSON and the shell stuff, not the jinja.
shopt -s extglob
s3cmd put --recursive -P arm/!(*.jinja) s3://neo4j-arm/test/

if [ $? -ne 0 ] ; then
    echo "S3 JSON upload failed; aborting"
    echo "Check your template syntax and try again"
    exit 1
fi

echo
echo "When finished with the resource group, execute:"
echo az group delete -n "${RESOURCE_GROUP}" --no-wait --yes
echo

echo "============================================"
echo "===== SETUP COMPLETE BEGINNING DEPLOY ======"
echo "============================================"

az group deployment create \
    --template-file arm/mainTemplate.json \
    --parameters @./.parameters.json \
    --resource-group "${RESOURCE_GROUP}" \
    --name "${DEPLOYMENT}"


