#!/bin/bash
#
# This script creates a sample resource group and deploys all resources into it from the ARM
# templates.  Most of it can be controlled from the outside by setting env vars.
########################################################################################

if [ -z "${CORE_NODES}" ]; then
    CORE_NODES=3
fi

if [ -z "${READ_REPLICAS}" ]; then
    READ_REPLICAS=1
fi

if [ -z "${NEO4J_PASSWORD}" ]; then
    read -p "Neo4j Password: " -s NEO4J_PASSWORD
    echo
fi

# These are only for test deploys.  Password is meaningless, and these
# test clusters get deleted typically <= 1 hour after they're created.
if [ -z "${ADMIN_CREDENTIAL}" ]; then
    ADMIN_CREDENTIAL=$(cat ~/.ssh/id_rsa.pub)
    #ADMIN_CREDENTIAL="p0_p01l;ST55ZZl;p"
fi

if [ -z "${ADMIN_AUTH_TYPE}" ]; then
    ADMIN_AUTH_TYPE="sshpublickey"
    #ADMIN_AUTH_TYPE="password"
fi

if [ -z "${USERNAME}" ]; then
    USERNAME=$(whoami)
fi

SEED=$(head -c 3 /dev/urandom | base64 | sed 's/[^a-zA-Z0-9]/X/g')

if [ -z "${RESOURCE_GROUP}" ] ; then
   export RESOURCE_GROUP="RG-${SEED}"
fi

if [ -z "${CLUSTERNAME}" ]; then
    # Must always be < 11 chars.
    CLUSTERNAME="neo4j-${SEED}"
fi

if [ -z "${DEPLOYMENT}" ]; then
    # DEPLOYMENT="neo4j-$(TZ=0 date +'Neo4j-HA-%Y%m%dT%H%M%SZ')"
    DEPLOYMENT=neo4j-testdeploy
fi

if [ -z "${LOCATION}" ]; then
    LOCATION="East US"
fi

echo $(cat <<JSON
{
    "ClusterName": {
        "value": "${CLUSTERNAME}"
    },
    "CoreNodes": {
        "value": ${CORE_NODES}
    },
    "ReadReplicas": {
        "value": ${READ_REPLICAS}
    },
    "VmSize": {
        "value": "Standard_A1_v2"
    },
    "DataDiskType": {
        "value": "StandardSSD_LRS"
    },
    "DataDiskSizeGB": {
        "value": 512
    },
    "AdminUserName": {
        "value": "${USERNAME}"
    },
    "AdminAuthType": {
        "value": "${ADMIN_AUTH_TYPE}"
    },
    "AdminCredential": {
        "value": "${ADMIN_CREDENTIAL}"
    },
    "PublicIPAllocationMethod": {
        "value": "Static"
    },
    "Neo4jPassword": {
        "value": "${NEO4J_PASSWORD}"
    },
    "_artifactsLocation": {
        "value": "https://s3.amazonaws.com/neo4j-arm/test/"
    }
}
JSON
) > .parameters.json

echo "Parameters have been prepared."

# Resource groups should be created for all things which share
# a lifecycle.  Deployments also can't delete all of their underlying
# resources, so we will destroy all deployment resources by actually
# deleting the entire group.
echo "Checking $RESOURCE_GROUP"
if ! az group show --name "${RESOURCE_GROUP}" &> /dev/null; then
    if ! az group create --name "${RESOURCE_GROUP}" --location "${LOCATION}"; then
        echo "Failed to create necessary resource group ${RESOURCE_GROUP}"
        exit $?
    fi
fi

echo
echo "When finished with the resource group, execute:"
echo az group delete -n "${RESOURCE_GROUP}" --no-wait --yes
echo

echo "============================================"
echo "===== SETUP COMPLETE BEGINNING DEPLOY ======"
echo "============================================"

startTime=`date`
echo "Start Time: $startTime"

time az group deployment create \
    --template-file arm/mainTemplate.json \
    --parameters @./.parameters.json \
    --resource-group "${RESOURCE_GROUP}" \
    --name "${DEPLOYMENT}" > .deploy.json

echo "Deploy finished.  Details in .deploy.json"
echo 
echo "Start time was $startTime"
echo
echo "When finished with the resource group, execute:"
echo az group delete -n "${RESOURCE_GROUP}" --no-wait --yes
echo


