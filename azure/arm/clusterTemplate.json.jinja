{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "Location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },

        "ClusterName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 11
        },

        "CoreNodes": {
            "type": "int",
            "minValue": 3,
            "maxValue": 9,
            "defaultValue": 3
        },

        "ReadReplicas": {
            "type": "int",
            "minValue": 0,
            "defaultValue": 0,
            "maxValue": 9
        },

        "VmSize": {
            "type": "string"
        },

        "AdminUserName": {
            "type": "securestring"
        },

        "AdminCredential": {
            "type": "securestring",
            "defaultValue": null
        },

        "VNetName": {
            "type": "string"
        },

        "VNetAddressPrefix": {
            "type": "string"
        },

        "VNetResourceGroupName": {
            "type": "string"
        },

        "SubnetName": {
            "type": "string"
        },

        "SubnetAddressPrefix": {
            "type": "string"
        },

        "PublicIPAllocationMethod": {
            "type": "string",
            "allowedValues": ["Static", "Dynamic"]
        },

        "Neo4jPassword": {
            "type": "securestring"
        },

        "Neo4jHttpsPort": {
            "type": "int"
        },

        "Neo4jHttpPort": {
            "type": "int"
        },

        "Neo4jBoltPort": {
            "type": "int"
        },
        
        "Neo4jClusterPort": {
            "type": "int",
            "defaultValue": 5000,
            "metadata": {
                "description": "The port used for communication between instances in the cluster"
            }
        },

        "Neo4jTransactionPort": {
            "type": "int",
            "defaultValue": 6000,
            "metadata": {
                "description": "The port used to read transaction data from the master"
            }
        },

        "Neo4jRaftPort": {
            "type": "int",
            "defaultValue": 7000,
            "metadata": {
                "description": "The port used to read transaction data from the master"
            }
        },

        "Neo4JTags": {
            "type": "object",
            "metadata": {
                "description": "Dictionary of tags to apply to the various resources"
            }
        },

        "ArtifactsBase": {
            "type": "string",
            "metadata": {
                "artifactsBaseUrl": "",
                "description": "base URL at which Marketplace package files are stored. Value adjusted automatically during Marketplace submission process."
            },
            "defaultValue": "https://s3.amazonaws.com/neo4j-arm/test"
        }
    },
    "variables": {
        "artifactsBase": "[concat(parameters('ArtifactsBase'),'/')]",
        "namePrefixes": {
            "nic": "[concat(parameters('ClusterName'),'-nic-')]",
            "nsg": "[concat(parameters('ClusterName'),'-sg')]",
            "storage": "[concat(toLower(trim(parameters('ClusterName'))), uniqueString(resourceGroup().id))]",
            "vm": "[concat(parameters('ClusterName'),'-vm-')]",
            "publicIP": "[concat(parameters('ClusterName'),'-public-ip')]",
            "loadBalancer": "[concat(parameters('ClusterName'),'-lb')]",
            "availabilitySet": "[concat(parameters('ClusterName'), '-as')]"
        },
        "LbResourceID": "[resourceId('Microsoft.Network/loadBalancers',variables('namePrefixes').loadBalancer)]",
        "resourceIDs": {
            "loadbalancer": "[variables('LbResourceID')]",
            "loadbalancerBEP": "[concat(variables('LbResourceID'), '/backendAddressPools/Neo4jInstancePool')]",
            "loadbalancerFE": "[concat(variables('LbResourceID'), '/frontendIPConfigurations/LoadBalancerFrontEnd')]",
            "availabilitySet": "[resourceId('Microsoft.Compute/availabilitySets', variables('namePrefixes').availabilitySet)]",
            "publicIP": "[resourceId('Microsoft.Network/publicIPAddresses', variables('namePrefixes').publicIP)]",
            "virtualNetwork": "[resourceId(parameters('VNetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('VNetName'))]"
        },
        "imageReferenceTest": {
            "id": "/subscriptions/e4486a99-00d6-4e46-aab0-b087f918eda9/resourceGroups/neo4j-public/providers/Microsoft.Compute/images/neo4j-enterprise-1-3.4.6-apoc_2018-08-27T06_03_45Z"
        },
        "imageReference": "[variables('imageReferenceTest')]",
        "authConfig": {
            "linuxConfiguration": {
                "disablePasswordAuthentication": true,
                "ssh": {
                    "publicKeys": [
                        {
                            "path": "[concat('/home/', parameters('AdminUserName'),'/.ssh/authorized_keys')]",
                            "keyData": "[parameters('AdminCredential')]"
                        }
                    ]
                }
            },
            "adminPassword": ""
        }
    },
    "resources": [
        {#
         # Network security group defines firewall rules for all nodes.
         # This security group is inherited by all cores and read replicas.
         #}
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('namePrefixes').nsg]",
            "apiVersion": "2016-12-01",
            "location": "[parameters('Location')]",
            "tags": "[parameters('Neo4JTags')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-ssh",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "http-probe",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(parameters('Neo4jHttpPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1010,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-https",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(parameters('Neo4jHttpsPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1020,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-bolt",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(parameters('Neo4jBoltPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1030,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "neo4j-cluster-communication",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(parameters('Neo4jClusterPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1040,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "neo4j-transaction-communication",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(parameters('Neo4jTransactionPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1050,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "neo4j-raft-communication",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "[string(parameters('Neo4jRaftPort'))]",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1060,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "dependsOn": []
        },
        {#
         # The Virtual Network (with subnets and in locations) defines the networking environment
         # for all nodes in the cluster.
         #}
        {
            "type": "Microsoft.Resources/deployments",
            "name": "VirtualNetwork",
            "apiVersion": "2017-05-10",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('artifactsBase'), 'vnet-new.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "NetworkName": {
                        "value": "[parameters('VNetName')]"
                    },
                    "NetworkAddressPrefix": {
                        "value": "[parameters('VNetAddressPrefix')]"
                    },
                    "SubnetName": {
                        "value": "[parameters('SubnetName')]"
                    },
                    "SubnetAddressPrefix": {
                        "value": "[parameters('SubnetAddressPrefix')]"
                    },
                    "Location": {
                        "value": "[parameters('Location')]"
                    },
                    "Neo4JTags": {
                        "value": "[parameters('Neo4JTags')]"
                    }
                }
            }
        },
        {#
         # The following included sub-template creates all IP addresses and virtual machines for the
         # given cluster topology role.
         #}
        {% with
             count_parameter='CoreNodes',
             dbms_mode="CORE" %}
           {% include 'arm/template-parts/neo4j-node.jinja' %},
        {% endwith %}
    ]
}
