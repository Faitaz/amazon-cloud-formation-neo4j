{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "ruleNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix to use for rule names. Will be suffixed with 1..<ruleCount>"
            }
        },
        "ruleCount": {
            "type": "int",
            "metadata": {
                "description": "Number of rules to generate."
            }
        },
        "frontendPortBase": {
            "type": "int",
            "metadata": {
                "description": "Use input ports starting at this value + index"
            }
        },
        "backendPort": {
            "type": "int",
            "metadata": {
                "description": "VM Target port for NAT rule"
            }
        },
        "protocol": {
            "type": "string",
            "allowedValues": [ "Tcp", "Udp" ],
            "defaultValue": "Tcp",
            "metadata": {
                "description": "Network protocol for the rule"
            }
        },
        "enableFloatingIP": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Value for enableFloatingIP property"
            }
        },
        "frontendIPConfigurationID": {
            "type": "string",
            "metadata": {
                "description": "Resource ID for frontendIPConfiguration"
            }
        },
        "ArtifactsBase": {
            "type": "string",
            "metadata": {
                "artifactsBaseUrl": ""
            },
            "defaultValue": "https://s3.amazonaws.com/neo4j-arm/test"
        }
    },
    "variables": {
        "stepNamePrefix": "[concat(parameters('ruleNamePrefix'),'-concatStep-')]"
    },
    "resources": [
        {
            "comments": "Dummy Step 0 to get a one-behind starting state for iterative list build from empty list",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('stepNamePrefix'), '0')]",
            "apiVersion": "2016-09-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('artifactsBase'), '/noResourceAppend.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "prefix": { "value": [ ] },
                    "suffix": { "value": [ ] }
                }
            }
        },
        {
            "comments": "Build a list of NAT rules by appending this one to the previous iteration's result",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('stepNamePrefix'), copyIndex(1))]",
            "apiVersion": "2016-09-01",
            "dependsOn": [
                "[concat(variables('stepNamePrefix'), copyIndex())]"
            ],
            "copy": {
                "name": "rCount",
                "count": "[parameters('ruleCount')]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('artifactsBase'), '/noResourceAppend.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "prefix": {
                        "value": "[reference(concat(variables('stepNamePrefix'), copyIndex())).outputs.newList.value]"
                    },
                    "suffix": {
                        "value": [
                            {
                                "name": "[concat(parameters('ruleNamePrefix'), copyIndex())]",
                                "properties": {
                                    "frontendIPConfiguration": {
                                        "id": "[parameters('frontendIPConfigurationID')]"
                                    },
                                    "protocol": "[parameters('protocol')]",
                                    "frontendPort": "[add(parameters('frontendPortBase'), copyIndex())]",
                                    "backendPort": "[parameters('backendPort')]",
                                    "enableFloatingIP": "[parameters('enableFloatingIP')]"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "outputs": {
        "ruleList": {
            "type": "array",
            "value": "[reference(concat(variables('stepNamePrefix'), parameters('ruleCount'))).outputs.newList.value]"
        }
    }
}
