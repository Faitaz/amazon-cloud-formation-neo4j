{% import "path_utils.jinja" as path_utils with context %}

{% set node_image = "https://www.googleapis.com/compute/v1/projects/launcher-development-191917/global/images/neo4j-cc-node-v4" %}

{% set project = env["project"] %}
{% set deployment = env["deployment"] %}
{% set name = "%s-vm-tmpl" % env["name"] %}
{% set instanceName = "%s-vm" % deployment %}
{% set zone = properties["zone"] %}
{% set machineType = properties["machineType"] %}
{% set network = path_utils.networkPath(properties["network"]) %}
{% set subnetwork = properties["subnetwork"] %}
{% set bootDiskType = properties["bootDiskType"] %}
{% set bootDiskSizeGb = properties["bootDiskSizeGb"] %}
{% set hasExternalIP = properties["externalIP"] != "None" %}
{# Software status only works if the VM has an external IP. #}
{% set enableStatusWaiter = hasExternalIP %}

resources:
  - name: generated-password
    type: password.py
    properties:
      length: 16
      includeSymbols: false
  - name: {{ name }}
    type: vm_multiple_instances.py
    properties:
      password: $(ref.generated-password.password)
      tags:
        items:
        - neo4j
        - neo4j-cc
      instanceName: {{ instanceName }}
      numberOfVMReplicas: 3
      sourceImage: {{ node_image }}
      zone: {{ zone }}
      machineType: {{ machineType }}
      network: {{ network }}
      {% if subnetwork %}
      subnetwork: {{ subnetwork }}
      {% endif %}
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      hasExternalIP: {{ hasExternalIP }}
      {# SEE README.md IN THIS REPO -- This is where all neo4j CC config goes #}
      metadata:
        items:
        - key: causal_clustering_initial_discovery_members
          value: {{instanceName}}-1:5000,{{instanceName}}-2:5000,{{instanceName}}-3:5000
        - key: startup-script
          value: |
            echo "Post-startup script " `whoami` >> /tmp/vmdeploy.txt
            /bin/systemctl stop neo4j.service >>/tmp/vmdeploy.txt 2>&1 
            /usr/bin/neo4j-admin unbind >>/tmp/vmdeploy.txt 2>&1 
            /bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ >>/tmp/vmdeploy.txt 2>&1 
            /bin/systemctl start neo4j.service >>/tmp/vmdeploy.txt 2>&1 

            while true; do
                # Loop waiting for neo4j service to start.
                if curl -s -I http://localhost:7474 | grep "200 OK"; then
                    echo "Neo4j is up; changing default password" >>/tmp/vmdeploy.txt 2>&1 

                    curl -v -H "Content-Type: application/json" \
                            -XPOST -d '{"password":"$(ref.generated-password.password)"}' \
                            -u neo4j:admin \
                            http://localhost:7474/user/neo4j/password \
                            >>/tmp/vmdeploy.txt 2>&1 
                    echo "Done" >>/tmp/vmdeploy.txt 2>&1 
                    break
                fi

                echo "Waiting for neo4j to come up" >>/tmp/vmdeploy.txt 2>&1 
                sleep 1
            done        
      serviceAccounts:
        - email: default
          scopes:
            - 'https://www.googleapis.com/auth/cloud.useraccounts.readonly'
            - 'https://www.googleapis.com/auth/devstorage.read_only'
            - 'https://www.googleapis.com/auth/logging.write'
            - 'https://www.googleapis.com/auth/monitoring.write'

outputs:
  - name: deployment
    value: {{ deployment }}
  - name: project
    value: {{ project }}
  - name: username
    value: neo4j
  - name: password
    value: $(ref.generated-password.password)
  - name: vmId
    value: $(ref.{{ instanceName }}-1.id)
  - name: vmInternalIP
    value: "not yet specified"
  - name: vmExternalIP
    value: "not yet specified"
  - name: vmName
    value: {{ instanceName }}-1
  - name: vmSelfLink1
    value: $(ref.{{ instanceName }}-1.selfLink)
  - name: vmSelfLink2
    value: $(ref.{{ instanceName }}-2.selfLink)
  - name: vmSelfLink3
    value: $(ref.{{ instanceName }}-3.selfLink)
