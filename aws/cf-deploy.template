{
    {# Defaults #}
    {% if max_nodes is not defined %}
      {% set max_nodes = 8 %}
    {% endif %}
    {% if min_nodes is not defined %}
      {% set min_nodes = 3 %}
    {% endif %}
    {% if default_machine is not defined %}
      {% set default_machine = "m3.medium" %}
    {% endif %}

    {#
     # This file is a Jinja template, and not a regular cloudformation template, because Amazon
     # makes it difficult to deploy a variable number of EC2 resources.  For full discussion of
     # why, see this: https://stackoverflow.com/a/41539208/2920686
     # This file is approach 2, template preprocessor with conditions.
     #}
    "Description": "Neo4j on AWS - creates an EC2 Ubuntu machine, EBS volume, static IP address, and deploys the Neo4j Graph Database on it.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Mappings": {        
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "64": "ami-3727ce4a"
            },
            "us-east-2": {
                "64": "ami-ad0433c8"
            },
            "us-west-2": {
                "64": "ami-d463eaac"
            },
            "us-west-1": {
                "64": "ami-2afbde4aXXX"
            },
            "eu-west-1": {
                "64": "ami-47a23a30XXX"
            },
            "ca-central-1": {
                "64": "ami-b3d965d7XXX"
            },
            "eu-central-1": {
                "64": "ami-060cde69XXX"
            },
            "ap-southeast-1": {
                "64": "ami-8fcc75ecXXX"
            },
            "ap-southeast-2": {
                "64": "ami-96666ff5XXX"
            },
            "ap-northeast-1": {
                "64": "ami-afb09dc8XXX"
            },
            "sa-east-1": {
                "64": "ami-4090f22cXXX"
            }
        }
    },
    "Parameters": {
        "ClusterName": {
            "Description": "name for your deployment",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 40,
            "Default": "neo4j-enteprise"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "{{default_machine}}",
            "AllowedValues": [
                "m1.medium",
                "m1.large",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "ClusterNodes": {
            "Description": "Number of VMs in the cluster",
            "Type": "Number",
            "Default": {{ min_nodes }},
            "MinValue": {{ min_nodes }},
            "MaxValue": {{max_nodes}}
        },
        "SSHKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NetworkWhitelist": {
            "Description": " The IP address range that can be used to connect to Neo4j",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "Password": {
            "NoEcho": true,
            "Description": "initial neo4j password (uppercase, lowercase, and numbers only)",
            "Type": "String",
            "MinLength": 8,
            "MaxLength": 40,
            "AllowedPattern": "^[a-zA-Z0-9\\.-]+$"
        }
    },
    "Conditions": {
        "CreateNode1": true,
        "CreateNode2": true,
        "CreateNode3": true,
        {% for i in range(4, (max_nodes + 1)) %}
        "CreateNode{{i}}": {
            {# Or function requires guaranteed minimum 2 args #}
            "Fn::Or": [
                {% if i == max_nodes %}{ "Fn::Equals": [0, 1 ] },{% endif %}
                {% for c in range(i, max_nodes + 1, 1) %}
                { "Fn::Equals": [{ "Ref": "ClusterNodes" }, {{c}} ]}{% if not loop.last %},{% endif %}
                {% endfor %}                
            ]
        } {% if not loop.last %},{% endif %}
        {% endfor %}
    },
    "Resources": {
        {# Create all of the resources given the cluster size #}
        {% for i in range(1, (max_nodes + 1)) %}
        "ElasticIPNeo4j{{i}}": {
            "Type": "AWS::EC2::EIP",
            "Condition" : "CreateNode{{i}}",
            "Properties": {
                "InstanceId": { "Ref": "Neo4jServer{{i}}" }
            }
        },
        "Neo4jServer{{i}}": {
            "Type": "AWS::EC2::Instance",
            "Condition" : "CreateNode{{i}}",
            "Properties": {
                "AvailabilityZone": { "Fn::Select": [ 0, { "Fn::GetAZs": "" } ] },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ]
                },
                "InstanceType": { "Ref": "InstanceType" },
                "KeyName": { "Ref": "SSHKeyName" },
                "Monitoring": "false",
                "SecurityGroups": [ { "Ref": "sgNeo4jEnterprise" } ],
                "Tags": [
                    { "Key": "Name", "Value": "Neo4j on AWS" },
                    { "Key": "InstanceID", "Value": { "Fn::Join": ["", [ { "Ref": "ClusterName" }, "{{i}}" ] ]} }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "echo `date` >>/tmp/foo.log"
                            ]
                        ]
                    }
                },
                "Volumes": [
                    {
                        "VolumeId": {
                            "Ref": "EBSVolumeNeo4j{{i}}"
                        },
                        "Device": "/dev/sdj"
                    }
                ]
            }
        },
        "EBSVolumeNeo4j{{i}}": {
            "Type": "AWS::EC2::Volume",
            "Condition" : "CreateNode{{i}}",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [ 0, { "Fn::GetAZs": "" } ]
                },
                "Size": "100"
            }
        },
        {% endfor %}
        "sgNeo4jEnterprise": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Neo4j Ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7687",
                        "ToPort": "7687",
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7473",
                        "ToPort": "7473",
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "Neo4jWebadmin": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer1",
                                "PublicIp"
                            ]
                        },
                        ":7473/"
                    ]
                ]
            },
            "Description": "This is the address of your Neo4j server web administration console."
        },
        "Username": {
            "Value": "neo4j"
        },
        "Password": {
            "Value": {
                "Ref": "Password"
            }
        },
        "SSH": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "ssh -i ${HOME}/.ssh/",
                        { "Ref": "SSHKeyName" },
                        ".pem -l ubuntu ",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer1",
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            },
            "Description": "This is how you gain remote access to the machine."
        },
        "Note": {
            "Value": "It takes a few minutes for your EC2 machines to finish booting and start Neo4j.  Coffee time! â˜•",
            "Description": ""
        }
    }
}